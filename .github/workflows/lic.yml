name: License Check

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Create directory and write Go code
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/xml"
              "fmt"
              "os"
              "net/http"
              "strings"
          )

          type License struct {
              Name string ` + "`xml:\"name\"`" + `
          }

          type POM struct {
              Licenses []License ` + "`xml:\"licenses>license\"`" + `
          }

          func fetchLicenseFromMaven(group, artifact, version string) (string, error) {
              url := fmt.Sprintf("https://repo1.maven.org/maven2/%s/%s/%s/%s-%s.pom",
                  strings.ReplaceAll(group, ".", "/"), artifact, version, artifact, version)
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", err
              }
              defer resp.Body.Close()

              if resp.StatusCode != 200 {
                  return "Unknown", nil
              }

              var pom POM
              decoder := xml.NewDecoder(resp.Body)
              if err := decoder.Decode(&pom); err != nil {
                  return "Unknown", err
              }

              if len(pom.Licenses) > 0 {
                  return pom.Licenses[0].Name, nil
              }
              return "Unknown", nil
          }

          func main() {
              licenses := []struct {
                  Group    string
                  Artifact string
                  Version  string
              }{
                  {"com.squareup.retrofit2", "retrofit", "2.9.0"},
                  {"com.example", "unknown", "1.0.0"},
              }

              for _, license := range licenses {
                  name, err := fetchLicenseFromMaven(license.Group, license.Artifact, license.Version)
                  if err != nil {
                      fmt.Printf("Error fetching license for %s:%s:%s - %v\n", license.Group, license.Artifact, license.Version, err)
                  } else {
                      fmt.Printf("Dependency: %s:%s:%s - License: %s\n", license.Group, license.Artifact, license.Version, name)
                  }
              }
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../kotlin_checker

      - name: Run License Checker
        run: |
          ./kotlin_checker

      - name: Upload License Report
        uses: actions/upload-artifact@v3
        with:
          name: kotlin-license-report
          path: dependency-report.html
