name: Dependency License Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Java (Required for Gradle)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Step 4: Run Gradle License Report
      - name: Generate Kotlin Dependency License Report
        run: ./gradlew generateLicenseReport

      # Step 5: Upload Kotlin Dependency License Report
      - name: Upload Kotlin License Report
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-dependency-license-report
          path: build/reports/dependency-license/dependency-license.json

      # Step 6: Setup Go Environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 7: Create and Build License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "net/http"
              "os"
              "strings"
          )

          type Dependency struct {
              Name     string
              License  string
              Details  string
              Copyleft bool
          }

          func main() {
              // Parse Kotlin dependencies from JSON report
              kotlinDeps := parseKotlinDependencies("build/reports/dependency-license/dependency-license.json")

              // Generate HTML report
              generateHTMLReport(kotlinDeps)
              fmt.Println("Dependency license report generated: dependency-license-report.html")
          }

          func parseKotlinDependencies(filePath string) []Dependency {
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading Gradle license report:", err)
                  return nil
              }

              var data []map[string]interface{}
              json.Unmarshal(file, &data)

              var result []Dependency
              for _, dep := range data {
                  name, _ := dep["moduleName"].(string)
                  licenses, _ := dep["moduleLicense"].([]interface{})
                  license := "Unknown"
                  if len(licenses) > 0 {
                      license = fmt.Sprintf("%v", licenses[0])
                  }

                  result = append(result, Dependency{
                      Name:    name,
                      License: license,
                      Details: fmt.Sprintf("https://mvnrepository.com/artifact/%s", name),
                      Copyleft: isCopyleftLicense(license),
                  })
              }
              return result
          }

          func isCopyleftLicense(license string) bool {
              copyleftLicenses := []string{"GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL", "OFL", "CPL", "OSL", "APL"}
              license = strings.ToUpper(license)
              for _, copyleft := range copyleftLicenses {
                  if strings.Contains(license, copyleft) {
                      return true
                  }
              }
              return false
          }

          func generateHTMLReport(dependencies []Dependency) {
              htmlContent := ` +
                  "`<!DOCTYPE html>\n<html>\n<head>\n<title>Dependency License Report</title>\n<style>\ntable { width: 100%; border-collapse: collapse; }\nth, td { border: 1px solid #ddd; padding: 8px; }\nth { background-color: #f2f2f2; }\n.copyleft { background-color: #f8d7da; color: #721c24; }\n.non-copyleft { background-color: #d4edda; color: #155724; }\n</style>\n</head>\n<body>\n<h1>Dependency License Report</h1>\n<table>\n<tr><th>Package</th><th>License</th><th>Details</th></tr>`" +
                  " + generateTable(dependencies) + " +
                  "`</table>\n</body>\n</html>`"

              os.WriteFile("dependency-license-report.html", []byte(htmlContent), 0644)
          }

          func generateTable(dependencies []Dependency) string {
              if len(dependencies) == 0 {
                  return "<p>No dependencies found.</p>"
              }

              table := ""
              for _, dep := range dependencies {
                  class := "non-copyleft"
                  if dep.Copyleft {
                      class = "copyleft"
                  }
                  table += fmt.Sprintf(`<tr class="%s"><td>%s</td><td>%s</td><td><a href="%s" target="_blank">View Details</a></td></tr>`, class, dep.Name, dep.License, dep.Details)
              }
              return table
          }
          EOF

          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 8: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 9: Upload HTML Report
      - name: Upload Dependency License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html
